// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Repositories;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(EFGemeenteBoekContext))]
    [Migration("20221216142304_seeding")]
    partial class seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.Adres", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresId"));

                    b.Property<string>("BusNr")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("HuisNr")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("StraatId")
                        .HasColumnType("int");

                    b.HasKey("AdresId");

                    b.HasIndex("StraatId", "HuisNr", "BusNr")
                        .IsUnique()
                        .HasFilter("[BusNr] IS NOT NULL");

                    b.ToTable("Adressen", (string)null);

                    b.HasData(
                        new
                        {
                            AdresId = 1,
                            HuisNr = "1",
                            StraatId = 24
                        },
                        new
                        {
                            AdresId = 2,
                            HuisNr = "2",
                            StraatId = 23
                        },
                        new
                        {
                            AdresId = 3,
                            HuisNr = "3",
                            StraatId = 22
                        },
                        new
                        {
                            AdresId = 4,
                            HuisNr = "4",
                            StraatId = 21
                        },
                        new
                        {
                            AdresId = 5,
                            HuisNr = "5",
                            StraatId = 20
                        },
                        new
                        {
                            AdresId = 6,
                            HuisNr = "6",
                            StraatId = 19
                        },
                        new
                        {
                            AdresId = 7,
                            HuisNr = "7",
                            StraatId = 18
                        },
                        new
                        {
                            AdresId = 8,
                            HuisNr = "8",
                            StraatId = 17
                        },
                        new
                        {
                            AdresId = 9,
                            HuisNr = "9",
                            StraatId = 16
                        },
                        new
                        {
                            AdresId = 10,
                            HuisNr = "10",
                            StraatId = 15
                        },
                        new
                        {
                            AdresId = 11,
                            HuisNr = "11",
                            StraatId = 14
                        },
                        new
                        {
                            AdresId = 12,
                            HuisNr = "12",
                            StraatId = 13
                        },
                        new
                        {
                            AdresId = 13,
                            HuisNr = "13",
                            StraatId = 12
                        },
                        new
                        {
                            AdresId = 14,
                            HuisNr = "14",
                            StraatId = 11
                        },
                        new
                        {
                            AdresId = 15,
                            HuisNr = "15",
                            StraatId = 10
                        },
                        new
                        {
                            AdresId = 16,
                            HuisNr = "16",
                            StraatId = 9
                        },
                        new
                        {
                            AdresId = 17,
                            HuisNr = "17",
                            StraatId = 8
                        },
                        new
                        {
                            AdresId = 18,
                            HuisNr = "18",
                            StraatId = 7
                        },
                        new
                        {
                            AdresId = 19,
                            HuisNr = "19",
                            StraatId = 6
                        },
                        new
                        {
                            AdresId = 20,
                            HuisNr = "20",
                            StraatId = 5
                        },
                        new
                        {
                            AdresId = 21,
                            HuisNr = "21",
                            StraatId = 4
                        },
                        new
                        {
                            AdresId = 22,
                            HuisNr = "22",
                            StraatId = 3
                        },
                        new
                        {
                            AdresId = 23,
                            HuisNr = "23",
                            StraatId = 2
                        },
                        new
                        {
                            AdresId = 24,
                            HuisNr = "24",
                            StraatId = 1
                        });
                });

            modelBuilder.Entity("Model.Entities.Afdeling", b =>
                {
                    b.Property<int>("AfdelingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AfdelingId"));

                    b.Property<string>("AfdelingCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("AfdelingNaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AfdelingTekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AfdelingId");

                    b.HasIndex("AfdelingCode")
                        .IsUnique();

                    b.HasIndex("AfdelingNaam")
                        .IsUnique();

                    b.ToTable("Afdelingen", (string)null);

                    b.HasData(
                        new
                        {
                            AfdelingId = 1,
                            AfdelingCode = "VERK",
                            AfdelingNaam = "Verkoop"
                        },
                        new
                        {
                            AfdelingId = 2,
                            AfdelingCode = "BOEK",
                            AfdelingNaam = "Boekhouding"
                        },
                        new
                        {
                            AfdelingId = 3,
                            AfdelingCode = "AANK",
                            AfdelingNaam = "Aankoop"
                        });
                });

            modelBuilder.Entity("Model.Entities.Bericht", b =>
                {
                    b.Property<int>("BerichtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BerichtId"));

                    b.Property<string>("BerichtTekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BerichtTijdstip")
                        .HasColumnType("datetime2");

                    b.Property<string>("BerichtTitel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BerichtTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GemeenteId")
                        .HasColumnType("int");

                    b.Property<int?>("HoofdBerichtId")
                        .HasColumnType("int");

                    b.Property<int>("PersoonId")
                        .HasColumnType("int");

                    b.HasKey("BerichtId");

                    b.HasIndex("BerichtTypeId");

                    b.HasIndex("GemeenteId");

                    b.HasIndex("HoofdBerichtId");

                    b.HasIndex("PersoonId");

                    b.ToTable("Berichten", (string)null);
                });

            modelBuilder.Entity("Model.Entities.BerichtType", b =>
                {
                    b.Property<int>("BerichtTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BerichtTypeId"));

                    b.Property<string>("BerichtTypeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("BerichtTypeNaam")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BerichtTypeTekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BerichtTypeId");

                    b.HasIndex("BerichtTypeCode")
                        .IsUnique();

                    b.ToTable("BerichtTypes", (string)null);

                    b.HasData(
                        new
                        {
                            BerichtTypeId = 1,
                            BerichtTypeCode = "AL",
                            BerichtTypeNaam = "Algemeen"
                        },
                        new
                        {
                            BerichtTypeId = 2,
                            BerichtTypeCode = "TK",
                            BerichtTypeNaam = "Te koop"
                        },
                        new
                        {
                            BerichtTypeId = 3,
                            BerichtTypeCode = "IZ",
                            BerichtTypeNaam = "Ik zoek"
                        },
                        new
                        {
                            BerichtTypeId = 4,
                            BerichtTypeCode = "ID",
                            BerichtTypeNaam = "Idee"
                        },
                        new
                        {
                            BerichtTypeId = 5,
                            BerichtTypeCode = "LN",
                            BerichtTypeNaam = "Lenen"
                        },
                        new
                        {
                            BerichtTypeId = 6,
                            BerichtTypeCode = "WG",
                            BerichtTypeNaam = "Weggeven"
                        },
                        new
                        {
                            BerichtTypeId = 7,
                            BerichtTypeCode = "AC",
                            BerichtTypeNaam = "Activiteit"
                        },
                        new
                        {
                            BerichtTypeId = 8,
                            BerichtTypeCode = "MD",
                            BerichtTypeNaam = "Melding"
                        },
                        new
                        {
                            BerichtTypeId = 9,
                            BerichtTypeCode = "BS",
                            BerichtTypeNaam = "Babysit"
                        },
                        new
                        {
                            BerichtTypeId = 10,
                            BerichtTypeCode = "HD",
                            BerichtTypeNaam = "Huisdieren"
                        },
                        new
                        {
                            BerichtTypeId = 11,
                            BerichtTypeCode = "GH",
                            BerichtTypeNaam = "Gezondheid"
                        });
                });

            modelBuilder.Entity("Model.Entities.Gemeente", b =>
                {
                    b.Property<int>("GemeenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GemeenteId"));

                    b.Property<string>("GemeenteNaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HoofdGemeenteId")
                        .HasColumnType("int");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<int>("ProvincieId")
                        .HasColumnType("int");

                    b.Property<int>("TaalId")
                        .HasColumnType("int");

                    b.HasKey("GemeenteId");

                    b.HasIndex("GemeenteNaam")
                        .IsUnique();

                    b.HasIndex("HoofdGemeenteId");

                    b.HasIndex("ProvincieId");

                    b.HasIndex("TaalId");

                    b.ToTable("Gemeenten", (string)null);

                    b.HasData(
                        new
                        {
                            GemeenteId = 1730,
                            GemeenteNaam = "Gent",
                            PostCode = 9000,
                            ProvincieId = 3,
                            TaalId = 1
                        },
                        new
                        {
                            GemeenteId = 1731,
                            GemeenteNaam = "Sint-Amandsberg",
                            HoofdGemeenteId = 1730,
                            PostCode = 9040,
                            ProvincieId = 3,
                            TaalId = 1
                        },
                        new
                        {
                            GemeenteId = 1732,
                            GemeenteNaam = "Oostakker",
                            HoofdGemeenteId = 1730,
                            PostCode = 9041,
                            ProvincieId = 3,
                            TaalId = 1
                        },
                        new
                        {
                            GemeenteId = 1733,
                            GemeenteNaam = "Destelbergen",
                            HoofdGemeenteId = 1730,
                            PostCode = 9042,
                            ProvincieId = 3,
                            TaalId = 1
                        },
                        new
                        {
                            GemeenteId = 1734,
                            GemeenteNaam = "Brussel",
                            PostCode = 1000,
                            ProvincieId = 11,
                            TaalId = 2
                        },
                        new
                        {
                            GemeenteId = 1735,
                            GemeenteNaam = "miniBrussel",
                            HoofdGemeenteId = 1734,
                            PostCode = 1001,
                            ProvincieId = 11,
                            TaalId = 2
                        },
                        new
                        {
                            GemeenteId = 1736,
                            GemeenteNaam = "Molenbeek",
                            HoofdGemeenteId = 1734,
                            PostCode = 1002,
                            ProvincieId = 11,
                            TaalId = 2
                        },
                        new
                        {
                            GemeenteId = 1737,
                            GemeenteNaam = "Antwerpen",
                            PostCode = 2000,
                            ProvincieId = 1,
                            TaalId = 1
                        });
                });

            modelBuilder.Entity("Model.Entities.InteresseSoort", b =>
                {
                    b.Property<int>("InteresseSoortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InteresseSoortId"));

                    b.Property<string>("InteresseSoortNaam")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("InteresseSoortId");

                    b.HasIndex("InteresseSoortNaam")
                        .IsUnique();

                    b.ToTable("InteresseSoorten", (string)null);

                    b.HasData(
                        new
                        {
                            InteresseSoortId = 1,
                            InteresseSoortNaam = "Fietsen"
                        },
                        new
                        {
                            InteresseSoortId = 2,
                            InteresseSoortNaam = "ICT"
                        },
                        new
                        {
                            InteresseSoortId = 3,
                            InteresseSoortNaam = "Klussen"
                        },
                        new
                        {
                            InteresseSoortId = 4,
                            InteresseSoortNaam = "Muziek beluisteren"
                        },
                        new
                        {
                            InteresseSoortId = 5,
                            InteresseSoortNaam = "Muziek spelen"
                        },
                        new
                        {
                            InteresseSoortId = 6,
                            InteresseSoortNaam = "Natuur"
                        },
                        new
                        {
                            InteresseSoortId = 7,
                            InteresseSoortNaam = "TVkijken"
                        },
                        new
                        {
                            InteresseSoortId = 8,
                            InteresseSoortNaam = "Vrijwilligerswerk"
                        },
                        new
                        {
                            InteresseSoortId = 9,
                            InteresseSoortNaam = "Wandelen"
                        },
                        new
                        {
                            InteresseSoortId = 10,
                            InteresseSoortNaam = "Zwemmen"
                        });
                });

            modelBuilder.Entity("Model.Entities.Persoon", b =>
                {
                    b.Property<int>("PersoonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersoonId"));

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<string>("FamilieNaam")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Geblokkeerd")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeboorteplaatsId")
                        .HasColumnType("int");

                    b.Property<int>("Geslacht")
                        .HasColumnType("int");

                    b.Property<int>("LoginAantal")
                        .HasColumnType("int");

                    b.Property<string>("LoginNaam")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LoginPaswoord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersoonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaalId")
                        .HasColumnType("int");

                    b.Property<string>("TelefoonNr")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("VerkeerdeLoginsAantal")
                        .HasColumnType("int");

                    b.Property<string>("VoorNaam")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PersoonId");

                    b.HasIndex("AdresId");

                    b.HasIndex("GeboorteplaatsId");

                    b.HasIndex("LoginNaam")
                        .IsUnique();

                    b.HasIndex("TaalId");

                    b.ToTable("Personen", (string)null);

                    b.HasDiscriminator<string>("PersoonType").HasValue("Persoon");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Model.Entities.ProfielInteresse", b =>
                {
                    b.Property<int>("PersoonId")
                        .HasColumnType("int");

                    b.Property<int>("InteresseSoortId")
                        .HasColumnType("int");

                    b.Property<string>("ProfielInteresseTekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersoonId", "InteresseSoortId");

                    b.HasIndex("InteresseSoortId");

                    b.ToTable("ProfielInteresses", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Provincie", b =>
                {
                    b.Property<int>("ProvincieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvincieId"));

                    b.Property<string>("ProvincieCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ProvincieNaam")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ProvincieId");

                    b.HasIndex("ProvincieCode")
                        .IsUnique();

                    b.HasIndex("ProvincieNaam")
                        .IsUnique();

                    b.ToTable("Provincies", (string)null);

                    b.HasData(
                        new
                        {
                            ProvincieId = 1,
                            ProvincieCode = "ANT",
                            ProvincieNaam = "Antwerpen"
                        },
                        new
                        {
                            ProvincieId = 2,
                            ProvincieCode = "LIM",
                            ProvincieNaam = "Limburg"
                        },
                        new
                        {
                            ProvincieId = 3,
                            ProvincieCode = "OVL",
                            ProvincieNaam = "Oost-Vlaanderen"
                        },
                        new
                        {
                            ProvincieId = 4,
                            ProvincieCode = "VBR",
                            ProvincieNaam = "Vlaams-Brabant"
                        },
                        new
                        {
                            ProvincieId = 5,
                            ProvincieCode = "WVL",
                            ProvincieNaam = "West-Vlaanderen"
                        },
                        new
                        {
                            ProvincieId = 6,
                            ProvincieCode = "WBR",
                            ProvincieNaam = "Waals-Brabant"
                        },
                        new
                        {
                            ProvincieId = 7,
                            ProvincieCode = "HEN",
                            ProvincieNaam = "Henegouwen"
                        },
                        new
                        {
                            ProvincieId = 8,
                            ProvincieCode = "LUI",
                            ProvincieNaam = "Luik"
                        },
                        new
                        {
                            ProvincieId = 9,
                            ProvincieCode = "LUX",
                            ProvincieNaam = "Luxemburg"
                        },
                        new
                        {
                            ProvincieId = 10,
                            ProvincieCode = "NAM",
                            ProvincieNaam = "Namen"
                        },
                        new
                        {
                            ProvincieId = 11,
                            ProvincieCode = "BRU",
                            ProvincieNaam = "Brussel"
                        });
                });

            modelBuilder.Entity("Model.Entities.Straat", b =>
                {
                    b.Property<int>("StraatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StraatId"));

                    b.Property<int>("GemeenteId")
                        .HasColumnType("int");

                    b.Property<string>("StraatNaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StraatId");

                    b.HasIndex("GemeenteId");

                    b.HasIndex("StraatNaam", "GemeenteId")
                        .IsUnique();

                    b.ToTable("Straten", (string)null);

                    b.HasData(
                        new
                        {
                            StraatId = 1,
                            GemeenteId = 1730,
                            StraatNaam = "Stationsstraat"
                        },
                        new
                        {
                            StraatId = 2,
                            GemeenteId = 1730,
                            StraatNaam = "Dorpstraat"
                        },
                        new
                        {
                            StraatId = 3,
                            GemeenteId = 1730,
                            StraatNaam = "Kerkstraat"
                        },
                        new
                        {
                            StraatId = 4,
                            GemeenteId = 1731,
                            StraatNaam = "Ziekenhuisstraat"
                        },
                        new
                        {
                            StraatId = 5,
                            GemeenteId = 1731,
                            StraatNaam = "Kerkstraat"
                        },
                        new
                        {
                            StraatId = 6,
                            GemeenteId = 1731,
                            StraatNaam = "Dorpstraat"
                        },
                        new
                        {
                            StraatId = 7,
                            GemeenteId = 1732,
                            StraatNaam = "Brandweerstraat"
                        },
                        new
                        {
                            StraatId = 8,
                            GemeenteId = 1732,
                            StraatNaam = "Politiestraat"
                        },
                        new
                        {
                            StraatId = 9,
                            GemeenteId = 1732,
                            StraatNaam = "Stationsstraat"
                        },
                        new
                        {
                            StraatId = 10,
                            GemeenteId = 1733,
                            StraatNaam = "Waterstraat"
                        },
                        new
                        {
                            StraatId = 11,
                            GemeenteId = 1733,
                            StraatNaam = "Politiestraat"
                        },
                        new
                        {
                            StraatId = 12,
                            GemeenteId = 1733,
                            StraatNaam = "Vuurstraat"
                        },
                        new
                        {
                            StraatId = 13,
                            GemeenteId = 1734,
                            StraatNaam = "Waterstraat"
                        },
                        new
                        {
                            StraatId = 14,
                            GemeenteId = 1734,
                            StraatNaam = "Aardestraat"
                        },
                        new
                        {
                            StraatId = 15,
                            GemeenteId = 1734,
                            StraatNaam = "Kerkwegel"
                        },
                        new
                        {
                            StraatId = 16,
                            GemeenteId = 1735,
                            StraatNaam = "Aardestraat"
                        },
                        new
                        {
                            StraatId = 17,
                            GemeenteId = 1735,
                            StraatNaam = "Politiestraat"
                        },
                        new
                        {
                            StraatId = 18,
                            GemeenteId = 1735,
                            StraatNaam = "Vuurstraar"
                        },
                        new
                        {
                            StraatId = 19,
                            GemeenteId = 1736,
                            StraatNaam = "Waterstraat"
                        },
                        new
                        {
                            StraatId = 20,
                            GemeenteId = 1736,
                            StraatNaam = "Windstraat"
                        },
                        new
                        {
                            StraatId = 21,
                            GemeenteId = 1736,
                            StraatNaam = "Aardestraat"
                        },
                        new
                        {
                            StraatId = 22,
                            GemeenteId = 1737,
                            StraatNaam = "Brandweerstraat"
                        },
                        new
                        {
                            StraatId = 23,
                            GemeenteId = 1737,
                            StraatNaam = "Kerkstraat"
                        },
                        new
                        {
                            StraatId = 24,
                            GemeenteId = 1737,
                            StraatNaam = "Vuurstraat"
                        });
                });

            modelBuilder.Entity("Model.Entities.Taal", b =>
                {
                    b.Property<int>("TaalId")
                        .HasColumnType("int");

                    b.Property<string>("TaalCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("TaalNaam")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TaalId", "TaalCode");

                    b.ToTable("Talen", (string)null);

                    b.HasData(
                        new
                        {
                            TaalId = 1,
                            TaalCode = "nl",
                            TaalNaam = "Nederlands"
                        },
                        new
                        {
                            TaalId = 2,
                            TaalCode = "fr",
                            TaalNaam = "Frans"
                        },
                        new
                        {
                            TaalId = 3,
                            TaalCode = "en",
                            TaalNaam = "Engels"
                        });
                });

            modelBuilder.Entity("Model.Entities.Medewerker", b =>
                {
                    b.HasBaseType("Model.Entities.Persoon");

                    b.Property<int>("AfdelingId")
                        .HasColumnType("int");

                    b.HasIndex("AfdelingId");

                    b.HasDiscriminator().HasValue("M");

                    b.HasData(
                        new
                        {
                            PersoonId = 1,
                            AdresId = 1,
                            FamilieNaam = "Admin",
                            Geblokkeerd = false,
                            GeboorteDatum = new DateTime(2000, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeboorteplaatsId = 1730,
                            Geslacht = 0,
                            LoginAantal = 0,
                            LoginNaam = "Enzo",
                            LoginPaswoord = "Admin",
                            TaalId = 1,
                            TelefoonNr = "04123743123",
                            VerkeerdeLoginsAantal = 0,
                            VoorNaam = "Enzo",
                            AfdelingId = 1
                        },
                        new
                        {
                            PersoonId = 2,
                            AdresId = 1,
                            FamilieNaam = "Naessens",
                            Geblokkeerd = false,
                            GeboorteDatum = new DateTime(2002, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeboorteplaatsId = 1730,
                            Geslacht = 1,
                            LoginAantal = 0,
                            LoginNaam = "Jana",
                            LoginPaswoord = "Jana123",
                            TaalId = 1,
                            TelefoonNr = "04321564852",
                            VerkeerdeLoginsAantal = 0,
                            VoorNaam = "Jana",
                            AfdelingId = 1
                        },
                        new
                        {
                            PersoonId = 3,
                            AdresId = 1,
                            FamilieNaam = "Admin",
                            Geblokkeerd = false,
                            GeboorteDatum = new DateTime(2016, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeboorteplaatsId = 1730,
                            Geslacht = 1,
                            LoginAantal = 0,
                            LoginNaam = "Nayla",
                            LoginPaswoord = "Woef",
                            TaalId = 1,
                            TelefoonNr = "0123456789",
                            VerkeerdeLoginsAantal = 0,
                            VoorNaam = "Nayla",
                            AfdelingId = 1
                        });
                });

            modelBuilder.Entity("Model.Entities.Profiel", b =>
                {
                    b.HasBaseType("Model.Entities.Persoon");

                    b.Property<string>("BeroepTekst")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatieTijdstip")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAdres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacebookNaam")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirmaNaam")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("GoedgekeurdTijdstip")
                        .HasColumnType("datetime2");

                    b.Property<string>("KennismakingTekst")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LaatsteUpdateTijdstip")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteAdres")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("WoontHierSindsDatum")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("P");
                });

            modelBuilder.Entity("Model.Entities.Adres", b =>
                {
                    b.HasOne("Model.Entities.Straat", "Straat")
                        .WithMany("Adressen")
                        .HasForeignKey("StraatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Straat");
                });

            modelBuilder.Entity("Model.Entities.Bericht", b =>
                {
                    b.HasOne("Model.Entities.BerichtType", "BerichtType")
                        .WithMany("Berichten")
                        .HasForeignKey("BerichtTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.Gemeente", "Gemeente")
                        .WithMany("Berichten")
                        .HasForeignKey("GemeenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.Bericht", "HoofdBericht")
                        .WithMany("Berichten")
                        .HasForeignKey("HoofdBerichtId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Profiel", "Profiel")
                        .WithMany("Berichten")
                        .HasForeignKey("PersoonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BerichtType");

                    b.Navigation("Gemeente");

                    b.Navigation("HoofdBericht");

                    b.Navigation("Profiel");
                });

            modelBuilder.Entity("Model.Entities.Gemeente", b =>
                {
                    b.HasOne("Model.Entities.Gemeente", "Hoofdgemeente")
                        .WithMany("Gemeenten")
                        .HasForeignKey("HoofdGemeenteId");

                    b.HasOne("Model.Entities.Provincie", "Provincie")
                        .WithMany("Gemeenten")
                        .HasForeignKey("ProvincieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Taal", "Taal")
                        .WithMany("Gemeenten")
                        .HasForeignKey("TaalId")
                        .HasPrincipalKey("TaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hoofdgemeente");

                    b.Navigation("Provincie");

                    b.Navigation("Taal");
                });

            modelBuilder.Entity("Model.Entities.Persoon", b =>
                {
                    b.HasOne("Model.Entities.Adres", "Adres")
                        .WithMany("Personen")
                        .HasForeignKey("AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Gemeente", "Geboorteplaats")
                        .WithMany("Personen")
                        .HasForeignKey("GeboorteplaatsId");

                    b.HasOne("Model.Entities.Taal", "Taal")
                        .WithMany("Personen")
                        .HasForeignKey("TaalId")
                        .HasPrincipalKey("TaalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adres");

                    b.Navigation("Geboorteplaats");

                    b.Navigation("Taal");
                });

            modelBuilder.Entity("Model.Entities.ProfielInteresse", b =>
                {
                    b.HasOne("Model.Entities.InteresseSoort", "InteresseSoort")
                        .WithMany("ProfielInteresses")
                        .HasForeignKey("InteresseSoortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Profiel", "Profiel")
                        .WithMany("ProfielInteresses")
                        .HasForeignKey("PersoonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteresseSoort");

                    b.Navigation("Profiel");
                });

            modelBuilder.Entity("Model.Entities.Straat", b =>
                {
                    b.HasOne("Model.Entities.Gemeente", "Gemeente")
                        .WithMany()
                        .HasForeignKey("GemeenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gemeente");
                });

            modelBuilder.Entity("Model.Entities.Medewerker", b =>
                {
                    b.HasOne("Model.Entities.Afdeling", "Afdeling")
                        .WithMany("Medewerkers")
                        .HasForeignKey("AfdelingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Afdeling");
                });

            modelBuilder.Entity("Model.Entities.Adres", b =>
                {
                    b.Navigation("Personen");
                });

            modelBuilder.Entity("Model.Entities.Afdeling", b =>
                {
                    b.Navigation("Medewerkers");
                });

            modelBuilder.Entity("Model.Entities.Bericht", b =>
                {
                    b.Navigation("Berichten");
                });

            modelBuilder.Entity("Model.Entities.BerichtType", b =>
                {
                    b.Navigation("Berichten");
                });

            modelBuilder.Entity("Model.Entities.Gemeente", b =>
                {
                    b.Navigation("Berichten");

                    b.Navigation("Gemeenten");

                    b.Navigation("Personen");
                });

            modelBuilder.Entity("Model.Entities.InteresseSoort", b =>
                {
                    b.Navigation("ProfielInteresses");
                });

            modelBuilder.Entity("Model.Entities.Provincie", b =>
                {
                    b.Navigation("Gemeenten");
                });

            modelBuilder.Entity("Model.Entities.Straat", b =>
                {
                    b.Navigation("Adressen");
                });

            modelBuilder.Entity("Model.Entities.Taal", b =>
                {
                    b.Navigation("Gemeenten");

                    b.Navigation("Personen");
                });

            modelBuilder.Entity("Model.Entities.Profiel", b =>
                {
                    b.Navigation("Berichten");

                    b.Navigation("ProfielInteresses");
                });
#pragma warning restore 612, 618
        }
    }
}
